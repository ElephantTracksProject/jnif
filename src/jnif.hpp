#ifndef JNIF_HPP
#define JNIF_HPP

#include <string>
#include <vector>
#include <list>
#include <iostream>

#include <execinfo.h>
#include <stdio.h>
#include <unistd.h>

/**
 * The jnif namespace contains all type definitions, constants, enumerations
 * and structs of the jnif framework.
 *
 * These implementations is based on the Java Virtual Machine Specification
 * chapter 4, class file format.
 *
 * http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html
 *
 * @see ClassFile
 *
 */
namespace jnif {

/**
 * Represents a byte inside the Java Class File.
 * The sizeof(u1) must be equal to 1.
 */
typedef unsigned char u1;

/**
 * Represents two bytes inside the Java Class File.
 * The sizeof(u2) must be equal to 2.
 */
typedef unsigned short u2;

/**
 * Represents four bytes inside the Java Class File.
 * The sizeof(u4) must be equal to 4.
 */
typedef unsigned int u4;

/**
 *
 */
enum Magic {
	CLASSFILE_MAGIC = 0xcafebabe
};

/**
 *
 */
enum ClassFlags {

	/**
	 * Declared public; may be accessed from outside its package.
	 */
	CLASS_PUBLIC = 0x0001,

	/**
	 * Declared final; no subclasses allowed.
	 */
	CLASS_FINAL = 0x0010,

	/**
	 * Treat superclass methods specially when invoked by the
	 * invokespecial instruction.
	 */
	CLASS_SUPER = 0x0020,

	/**
	 * Is an interface, not a class.
	 */
	CLASS_INTERFACE = 0x0200,

	/**
	 * Declared abstract; must not be instantiated.
	 */
	CLASS_ABSTRACT = 0x0400,

	/**
	 * Declared synthetic; not present in the source code.
	 */
	CLASS_SYNTHETIC = 0x1000,

	/**
	 * Declared as an annotation type.
	 */
	CLASS_ANNOTATION = 0x2000,

	/**
	 * Declared as an enum type.
	 */
	CLASS_ENUM = 0x4000
};

/**
 *
 */
enum MethodFlags {

	/**
	 * Declared public; may be accessed from outside its package.
	 */
	METHOD_PUBLIC = 0x0001,

	/**
	 * Declared private; accessible only within the defining class.
	 */
	METHOD_PRIVATE = 0x0002,

	/**
	 * Declared protected; may be accessed within subclasses.
	 */
	METHOD_PROTECTED = 0x0004,

	/**
	 * Declared static.
	 */
	METHOD_STATIC = 0x0008,

	/**
	 * Declared final; must not be overridden (see 5.4.5).
	 */
	METHOD_FINAL = 0x0010,

	/**
	 * Declared synchronized; invocation is wrapped by a monitor use.
	 */
	METHOD_SYNCHRONIZED = 0x0020,

	/**
	 * A bridge method, generated by the compiler.
	 */
	METHOD_BRIDGE = 0x0040,

	/**
	 * Declared with variable number of arguments.
	 */
	METHOD_VARARGS = 0x0080,

	/**
	 * Declared native; implemented in a language other than Java.
	 */
	METHOD_NATIVE = 0x0100,

	/**
	 * Declared abstract; no implementation is provided.
	 */
	METHOD_ABSTRACT = 0x0400,

	/**
	 * Declared strictfp; floating-point mode is FP-strict.
	 */
	METHOD_STRICT = 0x0800,

	/**
	 * Declared synthetic; not present in the source code.
	 */
	METHOD_SYNTHETIC = 0x1000,
};

/**
 *
 */
enum FieldFlags {

	/**
	 * Declared public; may be accessed from outside its package.
	 */
	FIELD_PUBLIC = 0x0001,

	/**
	 * Declared private; usable only within the defining class.
	 */
	FIELD_PRIVATE = 0x0002,

	/**
	 * Declared protected; may be accessed within subclasses.
	 */
	FIELD_PROTECTED = 0x0004,

	/**
	 * Declared static.
	 */
	FIELD_STATIC = 0x0008,
	/**
	 * Declared final;
	 * never directly assigned to after object construction (JLS $17.5).
	 */
	FIELD_FINAL = 0x0010,

	/**
	 * Declared volatile; cannot be cached.
	 */
	FIELD_VOLATILE = 0x0040,

	/**
	 * Declared transient; not written or read by a persistent object manager.
	 */
	FIELD_TRANSIENT = 0x0080,

	/**
	 * Declared synthetic; not present in the source code.
	 */
	FIELD_SYNTHETIC = 0x1000,

	/**
	 * Declared as an element of an enum.
	 */
	FIELD_ENUM = 0x4000
};

/**
 * OPCODES constants definitions
 */
enum Opcode {
	OPCODE_nop = 0x00,
	OPCODE_aconst_null = 0x01,
	OPCODE_iconst_m1 = 0x02,
	OPCODE_iconst_0 = 0x03,
	OPCODE_iconst_1 = 0x04,
	OPCODE_iconst_2 = 0x05,
	OPCODE_iconst_3 = 0x06,
	OPCODE_iconst_4 = 0x07,
	OPCODE_iconst_5 = 0x08,
	OPCODE_lconst_0 = 0x09,
	OPCODE_lconst_1 = 0x0a,
	OPCODE_fconst_0 = 0x0b,
	OPCODE_fconst_1 = 0x0c,
	OPCODE_fconst_2 = 0x0d,
	OPCODE_dconst_0 = 0x0e,
	OPCODE_dconst_1 = 0x0f,
	OPCODE_bipush = 0x10,
	OPCODE_sipush = 0x11,
	OPCODE_ldc = 0x12,
	OPCODE_ldc_w = 0x13,
	OPCODE_ldc2_w = 0x14,
	OPCODE_iload = 0x15,
	OPCODE_lload = 0x16,
	OPCODE_fload = 0x17,
	OPCODE_dload = 0x18,
	OPCODE_aload = 0x19,
	OPCODE_iload_0 = 0x1a,
	OPCODE_iload_1 = 0x1b,
	OPCODE_iload_2 = 0x1c,
	OPCODE_iload_3 = 0x1d,
	OPCODE_lload_0 = 0x1e,
	OPCODE_lload_1 = 0x1f,
	OPCODE_lload_2 = 0x20,
	OPCODE_lload_3 = 0x21,
	OPCODE_fload_0 = 0x22,
	OPCODE_fload_1 = 0x23,
	OPCODE_fload_2 = 0x24,
	OPCODE_fload_3 = 0x25,
	OPCODE_dload_0 = 0x26,
	OPCODE_dload_1 = 0x27,
	OPCODE_dload_2 = 0x28,
	OPCODE_dload_3 = 0x29,
	OPCODE_aload_0 = 0x2a,
	OPCODE_aload_1 = 0x2b,
	OPCODE_aload_2 = 0x2c,
	OPCODE_aload_3 = 0x2d,
	OPCODE_iaload = 0x2e,
	OPCODE_laload = 0x2f,
	OPCODE_faload = 0x30,
	OPCODE_daload = 0x31,
	OPCODE_aaload = 0x32,
	OPCODE_baload = 0x33,
	OPCODE_caload = 0x34,
	OPCODE_saload = 0x35,
	OPCODE_istore = 0x36,
	OPCODE_lstore = 0x37,
	OPCODE_fstore = 0x38,
	OPCODE_dstore = 0x39,
	OPCODE_astore = 0x3a,
	OPCODE_istore_0 = 0x3b,
	OPCODE_istore_1 = 0x3c,
	OPCODE_istore_2 = 0x3d,
	OPCODE_istore_3 = 0x3e,
	OPCODE_lstore_0 = 0x3f,
	OPCODE_lstore_1 = 0x40,
	OPCODE_lstore_2 = 0x41,
	OPCODE_lstore_3 = 0x42,
	OPCODE_fstore_0 = 0x43,
	OPCODE_fstore_1 = 0x44,
	OPCODE_fstore_2 = 0x45,
	OPCODE_fstore_3 = 0x46,
	OPCODE_dstore_0 = 0x47,
	OPCODE_dstore_1 = 0x48,
	OPCODE_dstore_2 = 0x49,
	OPCODE_dstore_3 = 0x4a,
	OPCODE_astore_0 = 0x4b,
	OPCODE_astore_1 = 0x4c,
	OPCODE_astore_2 = 0x4d,
	OPCODE_astore_3 = 0x4e,
	OPCODE_iastore = 0x4f,
	OPCODE_lastore = 0x50,
	OPCODE_fastore = 0x51,
	OPCODE_dastore = 0x52,
	OPCODE_aastore = 0x53,
	OPCODE_bastore = 0x54,
	OPCODE_castore = 0x55,
	OPCODE_sastore = 0x56,
	OPCODE_pop = 0x57,
	OPCODE_pop2 = 0x58,
	OPCODE_dup = 0x59,
	OPCODE_dup_x1 = 0x5a,
	OPCODE_dup_x2 = 0x5b,
	OPCODE_dup2 = 0x5c,
	OPCODE_dup2_x1 = 0x5d,
	OPCODE_dup2_x2 = 0x5e,
	OPCODE_swap = 0x5f,
	OPCODE_iadd = 0x60,
	OPCODE_ladd = 0x61,
	OPCODE_fadd = 0x62,
	OPCODE_dadd = 0x63,
	OPCODE_isub = 0x64,
	OPCODE_lsub = 0x65,
	OPCODE_fsub = 0x66,
	OPCODE_dsub = 0x67,
	OPCODE_imul = 0x68,
	OPCODE_lmul = 0x69,
	OPCODE_fmul = 0x6a,
	OPCODE_dmul = 0x6b,
	OPCODE_idiv = 0x6c,
	OPCODE_ldiv = 0x6d,
	OPCODE_fdiv = 0x6e,
	OPCODE_ddiv = 0x6f,
	OPCODE_irem = 0x70,
	OPCODE_lrem = 0x71,
	OPCODE_frem = 0x72,
	OPCODE_drem = 0x73,
	OPCODE_ineg = 0x74,
	OPCODE_lneg = 0x75,
	OPCODE_fneg = 0x76,
	OPCODE_dneg = 0x77,
	OPCODE_ishl = 0x78,
	OPCODE_lshl = 0x79,
	OPCODE_ishr = 0x7a,
	OPCODE_lshr = 0x7b,
	OPCODE_iushr = 0x7c,
	OPCODE_lushr = 0x7d,
	OPCODE_iand = 0x7e,
	OPCODE_land = 0x7f,
	OPCODE_ior = 0x80,
	OPCODE_lor = 0x81,
	OPCODE_ixor = 0x82,
	OPCODE_lxor = 0x83,
	OPCODE_iinc = 0x84,
	OPCODE_i2l = 0x85,
	OPCODE_i2f = 0x86,
	OPCODE_i2d = 0x87,
	OPCODE_l2i = 0x88,
	OPCODE_l2f = 0x89,
	OPCODE_l2d = 0x8a,
	OPCODE_f2i = 0x8b,
	OPCODE_f2l = 0x8c,
	OPCODE_f2d = 0x8d,
	OPCODE_d2i = 0x8e,
	OPCODE_d2l = 0x8f,
	OPCODE_d2f = 0x90,
	OPCODE_i2b = 0x91,
	OPCODE_i2c = 0x92,
	OPCODE_i2s = 0x93,
	OPCODE_lcmp = 0x94,
	OPCODE_fcmpl = 0x95,
	OPCODE_fcmpg = 0x96,
	OPCODE_dcmpl = 0x97,
	OPCODE_dcmpg = 0x98,
	OPCODE_ifeq = 0x99,
	OPCODE_ifne = 0x9a,
	OPCODE_iflt = 0x9b,
	OPCODE_ifge = 0x9c,
	OPCODE_ifgt = 0x9d,
	OPCODE_ifle = 0x9e,
	OPCODE_if_icmpeq = 0x9f,
	OPCODE_if_icmpne = 0xa0,
	OPCODE_if_icmplt = 0xa1,
	OPCODE_if_icmpge = 0xa2,
	OPCODE_if_icmpgt = 0xa3,
	OPCODE_if_icmple = 0xa4,
	OPCODE_if_acmpeq = 0xa5,
	OPCODE_if_acmpne = 0xa6,
	OPCODE_goto = 0xa7,
	OPCODE_jsr = 0xa8,
	OPCODE_ret = 0xa9,
	OPCODE_tableswitch = 0xaa,
	OPCODE_lookupswitch = 0xab,
	OPCODE_ireturn = 0xac,
	OPCODE_lreturn = 0xad,
	OPCODE_freturn = 0xae,
	OPCODE_dreturn = 0xaf,
	OPCODE_areturn = 0xb0,
	OPCODE_return = 0xb1,
	OPCODE_getstatic = 0xb2,
	OPCODE_putstatic = 0xb3,
	OPCODE_getfield = 0xb4,
	OPCODE_putfield = 0xb5,
	OPCODE_invokevirtual = 0xb6,
	OPCODE_invokespecial = 0xb7,
	OPCODE_invokestatic = 0xb8,
	OPCODE_invokeinterface = 0xb9,
	OPCODE_invokedynamic = 0xba,
	OPCODE_new = 0xbb,
	OPCODE_newarray = 0xbc,
	OPCODE_anewarray = 0xbd,
	OPCODE_arraylength = 0xbe,
	OPCODE_athrow = 0xbf,
	OPCODE_checkcast = 0xc0,
	OPCODE_instanceof = 0xc1,
	OPCODE_monitorenter = 0xc2,
	OPCODE_monitorexit = 0xc3,
	OPCODE_wide = 0xc4,
	OPCODE_multianewarray = 0xc5,
	OPCODE_ifnull = 0xc6,
	OPCODE_ifnonnull = 0xc7,
	OPCODE_goto_w = 0xc8,
	OPCODE_jsr_w = 0xc9,
	OPCODE_breakpoint = 0xca,
	OPCODE_impdep1 = 0xfe,
	OPCODE_impdep2 = 0xff
};

enum OpKind {
	KIND_ZERO,
	KIND_BIPUSH,
	KIND_SIPUSH,
	KIND_LDC,
	KIND_VAR,
	KIND_IINC,
	KIND_JUMP,
	KIND_TABLESWITCH,
	KIND_LOOKUPSWITCH,
	KIND_FIELD,
	KIND_INVOKE,
	KIND_INVOKEINTERFACE,
	KIND_INVOKEDYNAMIC,
	KIND_TYPE,
	KIND_NEWARRAY,
	KIND_MULTIARRAY,
	KIND_PARSE4TODO,
	KIND_RESERVED,
	KIND_LABEL,
	KIND_FRAME
};

/**
 *
 */
enum AType {
	T_BOOLEAN = 4,
	T_CHAR = 5,
	T_FLOAT = 6,
	T_DOUBLE = 7,
	T_BYTE = 8,
	T_SHORT = 9,
	T_INT = 10,
	T_LONG = 11
};

typedef u2 ClassIndex;

typedef u2 Label;

/**
 *
 */
enum AttrKind {
	ATTR_UNKNOWN,
	ATTR_SOURCEFILE,
	ATTR_CODE,
	ATTR_EXCEPTIONS,
	ATTR_LVT,
	ATTR_LVTT,
	ATTR_LNT,
	ATTR_SMT
};

class ErrorManager {
public:

	template<typename ... TArgs>
	static inline void raise(TArgs ... args) __attribute__((noreturn)) {
		std::ostream& os = std::cerr;

		os << "JNIF Exception: ";
		_raise(os, args...);
		os << std::endl;

		void *array[20];
		size_t size;

		// get void*'s for all entries on the stack
		size = backtrace(array, 20);

		// print out all the frames to stderr
		fprintf(stderr, "Error: exception on jnif:\n");
		backtrace_symbols_fd(array, size, STDERR_FILENO);
		//exit(1);

		throw "Error!!!";
	}

	template<typename ... TArgs>
	static inline void assert(bool cond, TArgs ... args) {
		if (!cond) {
			raise(args...);
		}

//		return cond;
	}

	template<typename ... TArgs>
	static inline void check(bool cond, TArgs ... args) {
		if (!cond) {
			raise(args...);
		}
	}

private:

	static inline void _raise(std::ostream&) {
	}

	template<typename TArg, typename ... TArgs>
	static inline void _raise(std::ostream& os, TArg arg, TArgs ... args) {
		os << arg;
		_raise(os, args...);
	}

};

struct Inst;

/**
 * Verification type class
 */
class Type: private ErrorManager {
public:

	enum Tag {
		TYPE_TOP = 0,
		TYPE_INTEGER = 1,
		TYPE_FLOAT = 2,
		TYPE_LONG = 4,
		TYPE_DOUBLE = 3,
		TYPE_NULL = 5,
		TYPE_UNINITTHIS = 6,
		TYPE_OBJECT = 7,
		TYPE_UNINIT = 8,
//		TYPE_BOOLEAN,
//		TYPE_BYTE,
//		TYPE_CHAR,
//		TYPE_SHORT,
		TYPE_VOID
	};

	static inline Type topType() {
		return Type(TYPE_TOP);
	}

//	static inline Type booleanType() {
//		return Type(TYPE_BOOLEAN);
//	}
//
//	static inline Type byteType() {
//		return Type(TYPE_BYTE);
//	}
//
//	static inline Type charType() {
//		return Type(TYPE_CHAR);
//	}
//
//	static inline Type shortType() {
//		return Type(TYPE_SHORT);
//	}

	static inline Type intType() {
		return Type(TYPE_INTEGER);
	}

	static inline Type floatType() {
		return Type(TYPE_FLOAT);
	}

	static inline Type longType() {
		return Type(TYPE_LONG);
	}

	static inline Type doubleType() {
		return Type(TYPE_DOUBLE);
	}

	static inline Type nullType() {
		return Type(TYPE_NULL);
	}

	static inline Type uninitthist() {
		return Type(TYPE_UNINITTHIS);
	}

	static inline Type objectType(const std::string& className,
			u2 cpindex = 0) {
		check(!className.empty(),
				"Expected non-empty class name for object type");

		return Type(TYPE_OBJECT, className, cpindex);
	}

	static inline Type uninitt(short offset, Inst* label) {
		return Type(TYPE_UNINIT, offset, label);
	}

	static inline Type voidType() {
		return Type(TYPE_VOID);
	}

	static inline Type arrayType(const Type& baseType, u4 dims) {
		check(dims > 0, "Invalid dims: ", dims);
		check(dims < 255, "Invalid dims: ", dims);
		check(!baseType.isArray(), "base type is already an array: ", baseType);

		return Type(baseType, dims);
	}

	Tag tag;

	u4 dims;

	union {
		struct {
			short offset;
			Inst* label;
		} uninit;
	};

	inline bool operator==(const Type& other) const {
		return tag == other.tag;
	}

	inline bool isTop() const {
		return tag == TYPE_TOP && !isArray();
	}

	inline bool isInt() const {
		return tag == TYPE_INTEGER && !isArray();
	}

	inline bool isFloat() const {
		return tag == TYPE_FLOAT && !isArray();
	}

	inline bool isLong() const {
		return tag == TYPE_LONG && !isArray();
	}

	inline bool isDouble() const {
		return tag == TYPE_DOUBLE && !isArray();
	}

	inline bool isNull() const {
		return tag == TYPE_NULL;
	}

	inline bool isObject() const {
		return tag == TYPE_OBJECT || isArray();
	}

	inline bool isArray() const {
		return dims > 0;
	}

	inline bool isVoid() const {
		return tag == TYPE_VOID;
	}

	inline bool isOneWord() const {
		return isInt() || isFloat() || isNull() || isObject();
	}

	inline bool isTwoWord() const {
		return isLong() || isDouble();
	}

	inline bool isOneOrTwoWord() const {
		return isOneWord() || isTwoWord();
	}

	inline const std::string& getClassName() const {
		check(isObject(), "Type is not object type to get class name: ", *this);
		return object.className;
	}

	inline u2 getCpIndex() const {
		check(isObject(), "Type is not object type to get cp index: ", *this);
		return object.cindex;
	}

	Type(const Type& other) = default;

private:

	inline Type(Tag tag) :
			tag(tag), dims(0) {
	}

	inline Type(Tag tag, short index) :
			tag(tag), dims(0) {
		object.cindex = index;
	}

	inline Type(Tag tag, short offset, Inst* label) :
			tag(tag), dims(0) {
		uninit.offset = offset;
		uninit.label = label;
	}

	inline Type(Tag tag, const std::string& className, u2 cpindex) :
			tag(tag), dims(0), object( { cpindex, className }) {
	}

	inline Type(const Type& other, u4 dims) :
			Type(other) {
		this->dims = dims;
	}

	struct {
		u2 cindex;
		std::string className;
	} object;
};

class Frame: private ErrorManager {
public:

//	enum TEnum {
//		Top = Type::TYPE_TOP,
//		Int = Type::TYPE_INTEGER,
//		Long = Type::TYPE_LONG,
//		Float = Type::TYPE_FLOAT,
//		Double = Type::TYPE_DOUBLE,
//		Ref = Type::TYPE_OBJECT
//	};

//typedef Type T;

	Frame() :
			valid(false) {
	}

	Type pop() {
		check(stack.size() > 0, "Trying to pop in an empty stack.");

		Type t = stack.front();
		stack.pop_front();
		return t;
	}

	Type popOneWord() {
		Type t = pop();
		assert(t.isOneWord(), "Type is not one word type: ", t);
		return t;
	}

	Type popTwoWord() {
		Type t = pop();
		Type top = pop();

		assert(t.isTwoWord(), "Type is two word type");
		assert(top.isTop(), "Type is not Top type");

		return t;
	}

	Type popArray() {
		return popOneWord();
	}

	Type popInt() {
		Type t = popOneWord();
		assert(t.isInt(), "invalid int type on top of the stack: ", t);
		return t;
	}

	Type popFloat() {
		Type t = popOneWord();
		assert(t.isFloat(), "invalid float type on top of the stack");
		return t;
	}

	Type popLong() {
		Type t = popTwoWord();
		assert(t.isLong(), "invalid long type on top of the stack");
		return t;
	}

	Type popDouble() {
		Type t = popTwoWord();
		assert(t.isDouble(), "invalid double type on top of the stack");
		return t;
	}

	Type popRef() {
		Type t = popOneWord();
		//assert(t.is(), "invalid ref type on top of the stack");
		return t;
	}

	void popType(const Type& type) {
		if (type.isInt()) {
			popInt();
		} else if (type.isFloat()) {
			popFloat();
		} else if (type.isLong()) {
			popLong();
		} else if (type.isDouble()) {
			popDouble();
		} else if (type.isObject()) {
			popRef();
		} else {
			raise("invalid pop type: ", type);
		}
	}

	void pushType(const Type& type) {
		if (type.isInt()) {
			pushInt();
		} else if (type.isFloat()) {
			pushFloat();
		} else if (type.isLong()) {
			pushLong();
		} else if (type.isDouble()) {
			pushDouble();
		} else if (type.isNull()) {
			pushNull();
		} else if (type.isObject()) {
			push(type);
		} else {
			raise("invalid push type: ", type);
		}
	}

	void push(const Type& t) {
		stack.push_front(t);
	}

	void pushInt() {
		push(Type::intType());
	}
	void pushLong() {
		push(Type::topType());
		push(Type::longType());
	}
	void pushFloat() {
		push(Type::floatType());
	}
	void pushDouble() {
		push(Type::topType());
		push(Type::doubleType());
	}

	void pushRef(const std::string& className) {
		push(Type::objectType(className));
	}

	void pushArray(const Type& type, u4 dims) {
		push(Type::arrayType(type, dims));
	}

	void pushNull() {
		push(Type::nullType());
	}

	void _setVar(u4 lvindex, const Type& t) {
		check(lvindex < 256, "");

		if (lvindex >= lva.size()) {
			lva.resize(lvindex + 1, Type::topType());
		}

		lva[lvindex] = t;
	}

	const Type& getVar(u4 lvindex) {
		return lva.at(lvindex);
	}

	void setVar(u4* lvindex, const Type& t) {
		assert(t.isOneOrTwoWord(), "Setting var on non one-two word ");

		if (t.isOneWord()) {
			_setVar(*lvindex, t);
			(*lvindex)++;
		} else {
			_setVar(*lvindex, t);
			_setVar(*lvindex + 1, Type::topType());
			(*lvindex) += 2;
		}
	}

	void setIntVar(u4 lvindex) {
		setVar(&lvindex, Type::intType());
	}

	void setLongVar(u4 lvindex) {
		setVar(&lvindex, Type::longType());
	}

	void setFloatVar(u4 lvindex) {
		setVar(&lvindex, Type::floatType());
	}

	void setDoubleVar(u4 lvindex) {
		setVar(&lvindex, Type::doubleType());
	}

	void setRefVar(u4 lvindex, const std::string& className) {
		setVar(&lvindex, Type::objectType(className));
	}

	void setRefVar(u4 lvindex, const Type& type) {
		check(type.isObject() || type.isNull(), "Type must be object type: ",
				type);
		setVar(&lvindex, type);
	}

	void clearStack() {
		stack.clear();
	}

	static bool isAssignable(const Type& subt, const Type& supt) {
		if (subt == supt) {
			return true;
		}

		if (supt.isTop()) {
			return true;
		}

		if (subt.isNull() && supt.isObject()) {
			return true;
		}

		return false;
	}

	bool assign(Type& t, Type o) {
//		check(isAssignable(t, o) || isAssignable(o, t), "Invalid assign type: ",
//				t, " <> ", o, " @ frame: ", *this);

		if (!isAssignable(t, o) && !isAssignable(o, t)) {
			t = Type::topType();
			return true;
		}

		if (isAssignable(t, o)) {
			if (t == o) {
				return false;
			}

			t = o;
			return true;
		}

		assert(isAssignable(o, t), "Invalid assign type: ", t, " <> ", o);

		return false;
	}

	void cleanTops() {
		for (int i = lva.size() - 1; i >= 0; i--) {
			Type t = lva[i];
			if (t.isTop()) {
				lva.erase(lva.begin() + i);
			} else {
				return;
			}
		}
	}

	bool join(Frame& how) {
		check(stack.size() == how.stack.size(), "Different stack sizes: ",
				stack.size(), " != ", how.stack.size());

		if (lva.size() < how.lva.size()) {
			lva.resize(how.lva.size(), Type::topType());
		} else if (how.lva.size() < lva.size()) {
			how.lva.resize(lva.size(), Type::topType());
		}

		assert(lva.size() == how.lva.size(), "%ld != %ld", lva.size(),
				how.lva.size());

		bool change = false;

		for (u4 i = 0; i < lva.size(); i++) {
			assign(lva[i], how.lva[i]);
		}

		std::list<Type>::iterator i = stack.begin();
		std::list<Type>::iterator j = how.stack.begin();

		for (; i != stack.end(); i++, j++) {
			assign(*i, *j);
		}

		return change;
	}

	std::vector<Type> lva;
	std::list<Type> stack;
	bool valid;
};

/**
 * Represent a bytecode instruction.
 */
struct Inst {
public:

//	Inst() {
//	}

	Inst(OpKind kind) :
			opcode(OPCODE_nop), kind(kind), _offset(0) {
		label.isBranchTarget = false;
	}

	Inst(Opcode opcode) :
			opcode(opcode), kind(KIND_ZERO), _offset(0) {
		label.isBranchTarget = false;
	}

	Inst(Opcode opcode, OpKind kind) :
			opcode(opcode), kind(kind), _offset(0) {
		label.isBranchTarget = false;
	}

	/**
	 * The opcode of this instruction.
	 */
	Opcode opcode;

	/**
	 * The kind of this instruction.
	 */
	OpKind kind;

	inline bool isJump() const {
		return kind == KIND_JUMP;
	}

	inline bool isTableSwitch() const {
		return kind == KIND_TABLESWITCH;
	}

	inline bool isLookupSwitch() const {
		return kind == KIND_LOOKUPSWITCH;
	}

	inline bool isBranch() const {
		return isJump() || isTableSwitch() || isLookupSwitch();
	}

	inline bool isExit() const {
		return (opcode >= OPCODE_ireturn && opcode <= OPCODE_return)
				|| opcode == OPCODE_athrow;
	}

	inline bool isLabel() const {
		return kind == KIND_LABEL;
	}

	int _offset;

//	friend Inst InvokeInst(Opcode opcode, u2 index) {
//		Inst inst();
//		inst.kind = KIND_INVOKE;
//		inst.opcode = opcode;
//		inst.invoke.methodRefIndex = index;
//
//		return inst;
//	}

	union {
		struct {
			u2 offset;
			u2 deltaOffset;
			int id;
			bool isBranchTarget;
		} label;
		struct {
			int value;
		} push;
		struct {
			u2 valueIndex;
		} ldc;
		struct {
			u1 lvindex;
		} var;
		struct {
			u1 index;
			u1 value;
		} iinc;
		struct {
			Opcode opcode;
			union {
				struct {
					u2 lvindex;
				} var;
				struct {
					u2 index;
					u2 value;
				} iinc;
			};
		} wide;
		struct {
			//Label label;
			Inst* label2;
		} jump;
		struct {
			u2 fieldRefIndex;
		} field;
		struct {
			u2 methodRefIndex;
		} invoke;
		struct {
			u2 interMethodRefIndex;
			u1 count;
		} invokeinterface;
		struct {
			ClassIndex classIndex;
		} type;
		struct {
			u1 atype;
		} newarray;
		struct {
			ClassIndex classIndex;
			u1 dims;
		} multiarray;
	};

	struct {
		Inst* def;
		int low;
		int high;
		std::vector<Inst*> targets;
	} ts;

	struct {
		Inst* defbyte;
		u4 npairs;
		std::vector<u4> keys;
		std::vector<Inst*> targets;
	} ls;

	struct {
		Frame frame;
	} frame;

};

/**
 * Represents the bytecode of a method.
 */
//typedef std::list<Inst*> InstList;
class InstList: public std::list<Inst*> {
public:
	~InstList() {
		for (Inst* inst : *this) {
			delete inst;
		}
	}

	void setLabelIds() {
		int id = 1;
		for (Inst* inst : *this) {
			if (inst->kind == KIND_LABEL) {
				inst->label.id = id;
				id++;
			}
		}
	}

	bool hasBranches() const {
		for (Inst* inst : *this) {
			if (inst->isBranch()) {
				return true;
			}
		}

		return false;
	}
};

/**
 * Constant pool enum
 */
enum ConstTag {
	CONST_CLASS = 7,
	CONST_FIELDREF = 9,
	CONST_METHODREF = 10,
	CONST_INTERMETHODREF = 11,
	CONST_STRING = 8,
	CONST_INTEGER = 3,
	CONST_FLOAT = 4,
	CONST_LONG = 5,
	CONST_DOUBLE = 6,
	CONST_NAMEANDTYPE = 12,
	CONST_UTF8 = 1,
	CONST_METHODHANDLE = 15,
	CONST_METHODTYPE = 16,
	CONST_INVOKEDYNAMIC = 18
};

struct Class {
	u2 nameIndex;
};

struct MemberRef {
	u2 classIndex;
	u2 nameAndTypeIndex;
};

struct FieldRef: MemberRef {
};

struct MethodRef: MemberRef {
};

struct InterMethodRef: MemberRef {
};

struct String {
	u2 stringIndex;
};

struct Integer {
	u4 value;
};

struct Float {
	u4 value;
};

struct Long {
	long value;
};

struct Double {
	double value;
};

struct NameAndType {
	u2 nameIndex;
	u2 descriptorIndex;
};

struct MethodHandle {
	u1 referenceKind;
	u2 referenceIndex;
};

struct MethodType {
	u2 descriptorIndex;
};

struct InvokeDynamic {
	u2 bootstrapMethodAttrIndex;
	u2 nameAndTypeIndex;
};

/**
 *
 */
class ConstItem {
public:

	ConstItem(ConstTag tag) :
			tag(tag) {
	}

	ConstTag tag;

	union {
		Class clazz;
		FieldRef fieldRef;
		MethodRef methodRef;
		InterMethodRef interMethodRef;
		String s;
		Integer i;
		Float f;
		Long l;
		Double d;
		NameAndType nameandtype;
		MethodHandle methodhandle;
		MethodType methodtype;
		InvokeDynamic invokedynamic;
	};
	struct {
		std::string str;
	} utf8;
};

/**
 * Represents the Java class file's constant pool. Provides the base services
 * to manage the constant pool. The constant pool is a table which holds
 * different kinds of items depending on their use. It can
 * hold references for classes, fields, methods, interface methods, strings,
 * integers, floats, longs, doubles, name and type, utf8 arrays,
 * method handles, method types and invoke dynamic bootstrap methods.
 */
class ConstPool: private ErrorManager {
public:

	/**
	 * The Index type represents how each item within the constant pool can
	 * be addressed.
	 */
	typedef u2 Index;

	/**
	 * Defines how to iterate the constant pool.
	 */
	class Iterator {
		friend class ConstPool;
	public:

		bool hasNext() const {
			return index < cp.size();
		}

		Index operator*() const {
			return index;
		}

		Iterator& operator++(int) {
			index += cp._isDoubleEntry(index) ? 2 : 1;

			return *this;
		}

	private:
		Iterator(const ConstPool& cp, Index index) :
				cp(cp), index(index) {
		}

		const ConstPool& cp;
		Index index;
	};

	/**
	 * Represents the invalid (null) item, which must not be asked for.
	 */
	static const u2 NULLENTRY = 0;

	/**
	 * Initializes an empty constant pool. The valid indices start from 1
	 * inclusive, because the null entry (index 0) is added by default.
	 */
	ConstPool() {
		// TODO: This is plain wrong!!!
		ConstItem nullEntry(CONST_INVOKEDYNAMIC);

		entries.push_back(nullEntry);
	}

	/**
	 *
	 */
	u4 size() const {
		return entries.size();
	}

	/**
	 *
	 */
	Iterator iterator() const {
		return Iterator(*this, 1);
	}

	/**
	 * Adds a class reference to the constant pool.
	 *
	 * @param classNameIndex the utf8 index that represents the name of this
	 * class item.
	 * @returns the index of the newly created reference to a class item.
	 */
	Index addClass(u2 classNameIndex) {
		ConstItem e(CONST_CLASS);
		e.clazz.nameIndex = classNameIndex;

		return _addSingle(e);
	}

	/**
	 * Adds a class reference to the constant pool by class name. This method
	 * adds also the utf8 entry corresponding the class name itself.
	 *
	 * @param className name of the class to reference.
	 * @returns the index of the newly created reference to a class item.
	 */
	Index addClass(const char* className) {
		Index classNameIndex = addUtf8(className);
		return addClass(classNameIndex);
	}

	/**
	 * Adds a field reference.
	 */
	Index addFieldRef(Index classIndex, Index nameAndTypeIndex) {
		ConstItem e(CONST_FIELDREF);
		e.fieldRef.classIndex = classIndex;
		e.fieldRef.nameAndTypeIndex = nameAndTypeIndex;

		return _addSingle(e);
	}

	/**
	 * Adds a class method reference.
	 */
	Index addMethodRef(Index classIndex, Index nameAndTypeIndex) {
		ConstItem e(CONST_METHODREF);
		e.methodRef.classIndex = classIndex;
		e.methodRef.nameAndTypeIndex = nameAndTypeIndex;

		return _addSingle(e);
	}

	/**
	 * Adds a non-interface methods by method name and descriptor.
	 */
	Index addMethodRef(u2 classIndex, const char* name, const char* desc) {
		Index methodNameIndex = addUtf8(name);
		Index methodDescIndex = addUtf8(desc);
		Index nameAndTypeIndex = addNameAndType(methodNameIndex,
				methodDescIndex);
		Index methodRefIndex = addMethodRef(classIndex, nameAndTypeIndex);

		return methodRefIndex;
	}

	/**
	 * Adds an interface method reference.
	 */
	Index addInterMethodRef(Index classIndex, Index nameAndTypeIndex) {
		ConstItem e(CONST_INTERMETHODREF);
		e.interMethodRef.classIndex = classIndex;
		e.interMethodRef.nameAndTypeIndex = nameAndTypeIndex;

		return _addSingle(e);
	}

	/**
	 *
	 */
	Index addString(Index utf8Index) {
		ConstItem e(CONST_STRING);
		e.s.stringIndex = utf8Index;

		return _addSingle(e);
	}

	/**
	 *
	 */
	Index addStringFromClass(u2 classIndex) {
		Index classNameIndex = getClassNameIndex(classIndex);
		Index classNameStringIndex = addString(classNameIndex);

		return classNameStringIndex;
	}

	/**
	 * Adds an integer.
	 *
	 * @param value the integer value.
	 */
	Index addInteger(u4 value) {
		ConstItem e(CONST_INTEGER);
		e.i.value = value;

		return _addSingle(e);
	}

	/**
	 * Adds a float.
	 *
	 * @param value the float value.
	 */
	Index addFloat(u4 value) {
		ConstItem e(CONST_FLOAT);
		e.f.value = value;

		return _addSingle(e);
	}

	Index addLong(long value) {
		ConstItem e(CONST_LONG);
		e.l.value = value;

		return _addDoubleEntry(e);
	}

	Index addDouble(double value) {
		ConstItem entry(CONST_DOUBLE);
		entry.d.value = value;

		return _addDoubleEntry(entry);
	}

	Index addNameAndType(Index nameIndex, Index descIndex) {
		ConstItem e(CONST_NAMEANDTYPE);
		e.nameandtype.nameIndex = nameIndex;
		e.nameandtype.descriptorIndex = descIndex;

		return _addSingle(e);
	}

	Index addUtf8(const char* utf8, int len) {
		ConstItem e(CONST_UTF8);
		std::string str(utf8, len);
		e.utf8.str = str;

		return _addSingle(e);
	}

	Index addUtf8(const char* str) {
		ConstItem e(CONST_UTF8);
		e.utf8.str = str;

		return _addSingle(e);
	}

	Index addMethodHandle(u1 refKind, u2 refIndex) {
		ConstItem e(CONST_METHODHANDLE);
		e.methodhandle.referenceKind = refKind;
		e.methodhandle.referenceIndex = refIndex;
		return _addSingle(e);
	}

	Index addMethodType(u2 descIndex) {
		ConstItem e(CONST_METHODTYPE);
		e.methodtype.descriptorIndex = descIndex;
		return _addSingle(e);

	}

	Index addInvokeDynamic(u2 bootstrapMethodAttrIndex, u2 nameAndTypeIndex) {
		ConstItem e(CONST_INVOKEDYNAMIC);
		e.invokedynamic.bootstrapMethodAttrIndex = bootstrapMethodAttrIndex;
		e.invokedynamic.nameAndTypeIndex = nameAndTypeIndex;
		return _addSingle(e);
	}

	/**
	 *
	 */
	ConstTag getTag(Index index) const {
		const ConstItem* entry = _getEntry(index);

		return entry->tag;
	}

	/**
	 * Checks whether the requested index holds a class reference.
	 */
	bool isClass(Index index) const {
		return _getEntry(index)->tag == CONST_CLASS;
	}

	bool isUtf8(Index index) const {
		return _getEntry(index)->tag == CONST_UTF8;
	}

	Index getClassNameIndex(Index classIndex) const {
		const ConstItem* e = _getEntry(classIndex, CONST_CLASS,
				"CONSTANT_Class");

		u2 ni = e->clazz.nameIndex;

		return Index(ni);
	}

	void getFieldRef(Index index, std::string* className, std::string* name,
			std::string* desc) const {
		const ConstItem* e = _getEntry(index, CONST_FIELDREF, "FieldRef");
		const MemberRef& mr = e->fieldRef;
		_getMemberRef(className, name, desc, mr);
	}

	void getMethodRef(Index index, std::string* clazzName, std::string* name,
			std::string* desc) const {
		const ConstItem* e = _getEntry(index, CONST_METHODREF, "MethodRef");
		const MemberRef& mr = e->methodRef;
		_getMemberRef(clazzName, name, desc, mr);
	}

	void getInterMethodRef(Index index, std::string* clazzName,
			std::string* name, std::string* desc) const {
		const ConstItem* e = _getEntry(index, CONST_INTERMETHODREF, "imr");
		const MemberRef& mr = e->interMethodRef;
		_getMemberRef(clazzName, name, desc, mr);
	}

	long getLong(Index index) const {
		return _getEntry(index, CONST_LONG, "CONSTANT_Long")->l.value;
	}

	double getDouble(Index index) const {
		return _getEntry(index, CONST_DOUBLE, "CONSTANT_Double")->d.value;
	}

	const char* getUtf8(Index utf8Index) const {
		const ConstItem* entry = _getEntry(utf8Index, CONST_UTF8, "Utf8");

		return entry->utf8.str.c_str();
	}

	const char* getClassName(Index classIndex) const {
		Index classNameIndex = getClassNameIndex(classIndex);

		return getUtf8(classNameIndex);
	}

	void getNameAndType(Index index, std::string* name,
			std::string* desc) const {
		const ConstItem* e = _getEntry(index, CONST_NAMEANDTYPE, "NameAndType");

		u2 nameIndex = e->nameandtype.nameIndex;
		u2 descIndex = e->nameandtype.descriptorIndex;

		*name = getUtf8(Index(nameIndex));
		*desc = getUtf8(Index(descIndex));
	}

	Index getIndexOfUtf8(const char* utf8) {

		ConstPool& cp = *this;
		for (ConstPool::Iterator it = cp.iterator(); it.hasNext(); it++) {
			ConstPool::Index i = *it;
			//ConstPool::Tag tag = cp.getTag(i);

			//const Entry* entry = &cp.entries[i];

			if (isUtf8(i) && getUtf8(i) == std::string(utf8)) {
				return i;
			}
		}

		return NULLENTRY;
	}

	Index putUtf8(const char* utf8) {
		Index i = getIndexOfUtf8(utf8);
		if (i == NULLENTRY) {
			return addUtf8(utf8);
		} else {
			return i;
		}
	}

	std::vector<ConstItem> entries;

private:

	Index _addSingle(const ConstItem& entry) {
		Index index = Index(entries.size());
		entries.push_back(entry);

		return index;
	}

	Index _addDoubleEntry(const ConstItem& entry) {
		Index index = Index(entries.size());

		entries.push_back(entry);

		// TODO: This is plain wrong!!!
		ConstItem nullEntry(CONST_INVOKEDYNAMIC);
		entries.push_back(nullEntry);

		return index;
	}

	const ConstItem* _getEntry(Index i) const {
		ErrorManager::check(i > NULLENTRY,
				"Null access to constant pool: index = ", i);
		check(i < entries.size(), "Index out of bounds: index = ", i);

		const ConstItem* entry = &entries[i];

		return entry;
	}

	const ConstItem* _getEntry(Index index, u1 tag, const char* message) const {
		const ConstItem* entry = _getEntry(index);

		check(entry->tag == tag, "Invalid constant ", message, (int) tag,
				(int) entry->tag);

		return entry;
	}

	bool _isDoubleEntry(Index index) const {
		const ConstItem* e = _getEntry(index);

		switch (e->tag) {
			case CONST_LONG:
			case CONST_DOUBLE:
				return true;
			default:
				return false;
		}
	}

	void _getMemberRef(std::string* clazzName, std::string* name,
			std::string* desc, const MemberRef& memberRef) const {
		Index classIndex = Index(memberRef.classIndex);
		Index nameAndTypeIndex = Index(memberRef.nameAndTypeIndex);

		*clazzName = getClassName(classIndex);
		getNameAndType(nameAndTypeIndex, name, desc);
	}

};

class BasicBlock {
public:
	BasicBlock(const BasicBlock&) = delete;
	BasicBlock(BasicBlock&&) = default;

	friend class ControlFlowGraph;

	void addTarget(BasicBlock* target) {
		targets.push_back(target);
	}

	InstList::iterator start;
	InstList::iterator exit;
	std::string name;
	Frame in;
	Frame out;

	std::vector<BasicBlock*>::iterator begin() {
		return targets.begin();
	}

	std::vector<BasicBlock*>::iterator end() {
		return targets.end();
	}

	BasicBlock* next;

private:

	BasicBlock(InstList::iterator start, InstList::iterator exit,
			std::string name) :
			start(start), exit(exit), name(name), next(nullptr) {
	}

	std::vector<BasicBlock*> targets;
};

class ControlFlowGraph: private ErrorManager {
private:
	std::vector<BasicBlock*> basicBlocks;

public:
	BasicBlock* const entry;

	BasicBlock* const exit;

	ControlFlowGraph(InstList& instList);

	~ControlFlowGraph() {
		for (auto bb : *this) {
			delete bb;
		}
	}

	BasicBlock* addBasicBlock(InstList::iterator start, InstList::iterator end,
			std::string name) {
		BasicBlock* bb = new BasicBlock(start, end, name);

		if (basicBlocks.size() > 0) {
			BasicBlock* prevbb = basicBlocks.back();
			prevbb->next = bb;
		}

		basicBlocks.push_back(bb);

		return bb;
	}

	inline std::vector<BasicBlock*>::iterator begin() {
		return basicBlocks.begin();
	}

	inline std::vector<BasicBlock*>::iterator end() {
		return basicBlocks.end();
	}

private:
	BasicBlock* addConstBb(InstList& instList, const char* name) {
		return addBasicBlock(instList.end(), instList.end(), name);
	}

};

/**
 * Defines the base class for all attributes in the class file.
 */
struct Attr {
	Attr(const Attr&) = delete;

	AttrKind kind;

	u2 nameIndex;
	u4 len;

//	virtual void accept(Visitor* v) = 0;

protected:

	Attr(AttrKind kind, u2 nameIndex, u4 len = 0) :
			kind(kind), nameIndex(nameIndex), len(len) {
	}
};

/**
 * Represents a collection of attributes within a class, method or field
 * or even with another attributes, e.g., CodeAttr.
 */
struct Attrs {
	Attrs(const Attrs&) = delete;
	Attrs(Attrs&&) = default;

	inline Attrs() {
	}

	~Attrs() {
		for (Attr* attr : attrs) {
			delete attr;
		}
	}

	inline Attr* add(Attr* attr) {
		attrs.push_back(attr);

		return attr;
	}

	inline u2 size() const {
		return attrs.size();
	}

	inline const Attr& operator[](u2 index) const {
		return *attrs[index];
	}

	std::vector<Attr*>::iterator begin() {
		return attrs.begin();
	}

	std::vector<Attr*>::iterator end() {
		return attrs.end();
	}

	std::vector<Attr*> attrs;
};

/**
 * Represents an unknown, and hence opaque, attribute to jnif.
 */
struct UnknownAttr: public Attr {

	const u1 * const data;

	UnknownAttr(u2 nameIndex, u4 len, const u1* data) :
			Attr(ATTR_UNKNOWN, nameIndex, len), data(data) {
	}

//	void accept(Visitor* v) {
//		v->visit(*this);
//	}
};

/**
 * Represents the LineNumberTable attribute within the Code attribute.
 */
struct LvtAttr: Attr {

	struct LvEntry {
		u2 startPc;
		Inst* startPcLabel;

		u2 len;
		u2 varNameIndex;
		u2 varDescIndex;
		u2 index;
	};

	std::vector<LvEntry> lvt;

	LvtAttr(AttrKind kind, u2 nameIndex) :
			Attr(kind, nameIndex) {
	}
};

/**
 * Represents the LineNumberTable attribute within the Code attribute.
 */
struct LntAttr: Attr {

	LntAttr(u2 nameIndex) :
			Attr(ATTR_LNT, nameIndex) {
	}

	struct LnEntry {
		u2 startpc;
		Inst* startPcLabel;

		u2 lineno;
	};

	std::vector<LnEntry> lnt;

};

/**
 *
 */
class SmtAttr: public Attr {
public:

	SmtAttr(u2 nameIndex) :
			Attr(ATTR_SMT, nameIndex) {
	}

	class Entry {
	public:

		int frameType;
		Inst* label;

		struct {
		} sameFrame;
		struct {
			std::vector<Type> stack; // [1]
		} sameLocals_1_stack_item_frame;
		struct {
			short offset_delta;
			std::vector<Type> stack; // [1]
		} same_locals_1_stack_item_frame_extended;
		struct {
			short offset_delta;
		} chop_frame;
		struct {
			short offset_delta;
		} same_frame_extended;
		struct {
			short offset_delta;
			std::vector<Type> locals; // frameType - 251
		} append_frame;
		struct {
			short offset_delta;
			std::vector<Type> locals;
			std::vector<Type> stack;
		} full_frame;
	};

	std::vector<Entry> entries;
};

/**
 * Represents the Exceptions attribute.
 */
struct ExceptionsAttr: Attr {

	ExceptionsAttr(u2 nameIndex, u4 len, const std::vector<u2>& es) :
			Attr(ATTR_EXCEPTIONS, nameIndex, len), es(es) {
	}

	std::vector<u2> es;
};

/**
 *
 */
struct CodeExceptionEntry {
	Inst* startpc;
	Inst* endpc;
	Inst* handlerpc;
	ConstPool::Index catchtype;
};

/**
 * Represent the Code attribute of a method.
 */
struct CodeAttr: Attr {

	CodeAttr(u2 nameIndex) :
			Attr(ATTR_CODE, nameIndex), maxStack(0), maxLocals(0), codeLen(0), cfg(
					nullptr) {
	}

	u2 maxStack;
	u2 maxLocals;
	u4 codeLen;

	InstList instList;

	std::vector<CodeExceptionEntry> exceptions;

	ControlFlowGraph* cfg;

	Attrs attrs;
};

/**
 *
 */
struct SourceFileAttr: Attr {

	const u2 sourceFileIndex;

	SourceFileAttr(u2 nameIndex, u4 len, u2 sourceFileIndex) :
			Attr(ATTR_SOURCEFILE, nameIndex, len), sourceFileIndex(
					sourceFileIndex) {
	}

};

/**
 *
 */
class Member: public Attrs, private ErrorManager {
public:

	friend class Field;
	friend class Method;
	Member(const Member&) = delete;
	Member(Member&&) = default;

	u2 accessFlags;
	ConstPool::Index nameIndex;
	ConstPool::Index descIndex;

//	const char* getName() const {
//		string name = cf.getUtf8(m->nameIndex);
//
//	}

private:

	Member(u2 accessFlags, ConstPool::Index nameIndex,
			ConstPool::Index descIndex) :
			accessFlags(accessFlags), nameIndex(nameIndex), descIndex(descIndex) {
	}
};

/**
 *
 */
class Field: public Member {
public:

	Field(u2 accessFlags, ConstPool::Index nameIndex,
			ConstPool::Index descIndex) :
			Member(accessFlags, nameIndex, descIndex) {
	}

};

/**
 *
 */
class Method: public Member {
public:

	Method(u2 accessFlags, ConstPool::Index nameIndex,
			ConstPool::Index descIndex) :
			Member(accessFlags, nameIndex, descIndex) {
	}

	bool hasCode() {
		for (Attr* attr : attrs) {
			if (attr->kind == ATTR_CODE) {
				return true;
			}
		}

		return false;
	}

	CodeAttr* codeAttr() {
		for (Attr* attr : attrs) {
			if (attr->kind == ATTR_CODE) {
				return (CodeAttr*) attr;
			}
		}

		return nullptr;
	}

	InstList& instList() {
		for (Attr* attr : attrs) {
			if (attr->kind == ATTR_CODE) {
				return ((CodeAttr*) attr)->instList;
			}
		}

		raise("ERROR! get inst list");
	}

	void instList(const InstList& newcode) {
		for (Attr* attr : attrs) {
			if (attr->kind == ATTR_CODE) {
				((CodeAttr*) attr)->instList = newcode;
				return;
			}
		}

		raise("ERROR! setting inst list");
	}

	inline bool isStatic() const {
		return accessFlags & METHOD_STATIC;
	}

};

/**
 * Models a Java Class File following the specification from version 7.
 */
class ClassFile: public ConstPool, public Attrs {
public:

	/**
	 * Constructs a default class file given the class name, the super class
	 * name and the access flags.
	 */
	ClassFile(const char* className, const char* superClassName =
			"java/lang/Object", u2 accessFlags = CLASS_PUBLIC, u2 majorVersion =
			51, u2 minorVersion = 0) :
			majorVersion(majorVersion), minorVersion(minorVersion), accessFlags(
					accessFlags), thisClassIndex(addClass(className)), superClassIndex(
					addClass(superClassName)) {
	}

	/**
	 * Constructs a class file from an in-memory representation of the java
	 * class file.
	 */
	ClassFile(const u1* classFileData, int classFileLen);

	/**
	 * Gets the class name of this class file.
	 */
	const char* getThisClassName() const {
		return getClassName(thisClassIndex);
	}

	/**
	 *
	 */
	Field* addField(ConstPool::Index nameIndex, ConstPool::Index descIndex,
			u2 accessFlags = FIELD_PUBLIC) {
		Field* field = new Field(accessFlags, nameIndex, descIndex);
		fields.push_back(field);
		return field;
	}

	/**
	 *
	 */
	Field* addField(const char* fieldName, const char* fieldDesc,
			u2 accessFlags = FIELD_PUBLIC) {
		ConstPool::Index nameIndex = addUtf8(fieldName);
		ConstPool::Index descIndex = addUtf8(fieldDesc);

		return addField(nameIndex, descIndex, accessFlags);
	}

	/**
	 *
	 */
	Method* addMethod(ConstPool::Index nameIndex, ConstPool::Index descIndex,
			u2 accessFlags = METHOD_PUBLIC) {
		Method* method = new Method(accessFlags, nameIndex, descIndex);
		methods.push_back(method);
		return method;
	}

	/**
	 *
	 */
	Method* addMethod(const char* methodName, const char* methodDesc,
			u2 accessFlags = METHOD_PUBLIC) {
		ConstPool::Index nameIndex = addUtf8(methodName);
		ConstPool::Index descIndex = addUtf8(methodDesc);

		return addMethod(nameIndex, descIndex, accessFlags);
	}

	/**
	 * Computes the size in bytes of this class file of the in-memory
	 * representation.
	 */
	u4 computeSize();

	/**
	 * Writes this class file in the specified buffer according to the
	 * specification.
	 */
	void write(u1* classFileData, int classFileLen);

	/**
	 *
	 */
	template<typename TAllocFunc>
	void write(u1** classFileData, int* classFileSize, TAllocFunc allocFunc) {
		*classFileSize = computeSize();
		*classFileData = allocFunc(*classFileSize);
		write(*classFileData, *classFileSize);
	}

	/**
	 * Shows the class file in a textual format, useful for debugging purposes.
	 */
	friend std::ostream& operator<<(std::ostream& os, ClassFile& cf);

	/**
	 *
	 */
	void computeFrames();

	u2 majorVersion;
	u2 minorVersion;
	u2 accessFlags;
	ConstPool::Index thisClassIndex;
	ConstPool::Index superClassIndex;
	std::vector<u2> interfaces;
	std::vector<Field*> fields;
	std::vector<Method*> methods;
};

std::ostream& operator<<(std::ostream& os, const ConstTag& tag);
std::ostream& operator<<(std::ostream& os, const Frame& frame);
std::ostream& operator<<(std::ostream& os, const Type& type);

}

#endif
